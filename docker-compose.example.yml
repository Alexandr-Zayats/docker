version: '3.6'
services:
  web:
    image: redis:alpine
# Specify labels for the service. These labels are only set on the service, and not on any containers for the service.
    labels:
      com.example.description: "This label will appear on all containers for the web service"

    deploy:
      labels:
        com.example.description: "This label will appear on the web service"
# Either global (exactly one container per swarm node) or replicated (a specified number of containers). The default is replicated
      mode: (replicated | global)
# If the service is replicated (which is the default), specify the number of containers that should be running at any given time.
      replicas: 6
      update_config:
        parallelism: 2
        delay: 10s
# Configures if and how to restart containers when they exit. Replaces restart.
      restart_policy:
        condition: (on-failure | none | any)
        delay: 5s
        max_attempts: 3
        window: 120s
# Specify a service discovery method for external clients connecting to a swarm.
      endpoint_mode: (vip | dnsrr)
# Specify placement of constraints and preferences. 
      placement:
        constraints:
          - node.role == manager
          - engine.labels.operatingsystem == ubuntu 14.04
        preferences:
          - spread: node.labels.zone
# Configures resource constraints.
      resources:
        limits:
          cpus: '0.50'
          memory: 50M
        reservations:
          cpus: '0.25'
          memory: 20M
# Configures how the service should be updated. Useful for configuring rolling updates.
#   -   parallelism: The number of containers to update at a time.
#   -   delay: The time to wait between updating a group of containers.
#   -   failure_action: What to do if an update fails. One of continue, rollback, or pause (default: pause).
#   -   monitor: Duration after each task update to monitor for failure (ns|us|ms|s|m|h) (default 0s).
#   -   max_failure_ratio: Failure rate to tolerate during an update.
#   -   order: Order of operations during updates. One of stop-first (old task is stopped before starting new one), or start-first (new task is started first, and the running tasks briefly overlap) (default stop-first) 
      update_config:
        parallelism: 2
        delay: 10s
        order: stop-first

# Specify a custom container name, rather than a generated default name.
    container_name: my-web-container

# list of device mappings. Uses the same format as the --device docker client create option.
    devices:
      - "/dev/ttyUSB0:/dev/ttyUSB0"

# Express dependency between services, Service dependencies cause the following behaviors:
    depends_on:
      - db
      - redis

# Custom DNS servers. Can be a single value or a list.
    dns: 8.8.8.8
    dns:
      - 8.8.8.8
      - 9.9.9.9

# Custom DNS search domains. Can be a single value or a list.
    dns_search: example.com
    dns_search:
      - dc1.example.com
      - dc2.example.com

# Mount a temporary file system inside the container. Can be a single value or a list.
    tmpfs: /run
    tmpfs:
      - /run
      - /tmp

# Override the default entrypoint.
    entrypoint: /code/entrypoint.sh
    entrypoint:
    - php
    - -d
    - zend_extension=/usr/local/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so
    - -d
    - memory_limit=-1
    - vendor/bin/phpunit

# Add environment variables from a file. Can be a single value or a list.
    env_file: .env
    env_file:
      - ./common.env
      - ./apps/web.env
      - /opt/secrets.env

# Grant access to configs on a per-service basis using the per-service configs configuration. Two different syntax variants are supported
    configs:
      - my_config
      - my_other_config
# OR LONG syntax
    configs:
      - source: my_config
        target: /redis_config
        uid: '103'
        gid: '103'
        mode: 0440
# Grant access to configs on a per-service basis using the per-service configs configuration. Two different syntax variants are supported.
configs:
  my_config:
    file: ./my_config.txt
  my_other_config:
    external: true

# Add environment variables. You can use either an array or a dictionary. Any boolean values; true, false, yes no, need to be enclosed in quotes to ensure they are not converted to True or False by the YML parser.
    environment:
      RACK_ENV: development
      SHOW: 'true'
      SESSION_SECRET:

    environment:
      - RACK_ENV=development
      - SHOW=true
      - SESSION_SECRET

# Expose ports without publishing them to the host machine - they’ll only be accessible to linked services. Only the internal port can be specified.
    expose:
      - "3000"
      - "8000"

# Link to containers started outside this docker-compose.yml or even outside of Compose, especially for containers that provide shared or common services. external_links follow semantics similar to the legacy option links when specifying both the container name and the link alias (CONTAINER:ALIAS).
    external_links:
      - redis_1
      - project_db_1:mysql
      - project_db_1:postgresql

# Add hostname mappings. Use the same values as the docker client --add-host parameter.
    extra_hosts:
      - "somehost:162.242.195.82"
      - "otherhost:50.31.209.229"

# Configure a check that’s run to determine whether or not containers for this service are “healthy”
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s

# Hit the local web app
# test: ["CMD", "curl", "-f", "http://localhost"]
#
# # As above, but wrapped in /bin/sh. Both forms below are equivalent.
# test: ["CMD-SHELL", "curl -f http://localhost || exit 1"]
# test: curl -f https://localhost || exit 1


# Logging configuration for the service.
    logging:
      driver: (syslog | json-file | none)
      options:
        syslog-address: "tcp://192.168.0.42:123"
# OR
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

# Network mode. Use the same values as the docker client --net parameter, plus the special form service:[service name]
    network_mode: "bridge"
    network_mode: "host"
    network_mode: "none"
    network_mode: "service:[service name]"
    network_mode: "container:[container name/id]"

# Networks to join, referencing entries under the top-level networks key.
    networks:
     - some-network
     - other-network

# Aliases (alternative hostnames) for this service on the network. Other containers on the same network can use either the service name or this alias to connect to one of the service’s containers.
    networks:
      some-network:
        aliases:
         - alias1
         - alias3
      other-network:
        aliases:
         - alias2

# Specify a static IP address for containers for this service when joining the network.
    command: ifconfig
    networks:
      app_net:
        ipv4_address: 172.16.238.10
        ipv6_address: 2001:3984:3989::10

networks:
    app_net:
        driver: bridge
        enable_ipv6: true
        ipam:
            driver: default
            config:
                - subnet: 172.16.238.0/24
                - subnet: 2001:3984:3989::/64

# Sets the PID mode to the host PID mode. This turns on sharing between container and the host operating system the PID address space. Containers launched with this flag can access and manipulate other containers in the bare-metal machine’s namespace and vise-versa.
    pid: "host"

# Expose ports.
    ports:
     - "3000"
     - "3000-3005"
     - "8000:8000"
     - "9090-9091:8080-8081"
     - "49100:22"
     - "127.0.0.1:8001:8001"
     - "127.0.0.1:5000-5010:5000-5010"
     - "6060:6060/udp"
# The long form syntax allows the configuration of additional fields that can’t be expressed in the short form.
    ports:
      - target: 80
        published: 8080
        protocol: tcp
        mode: host

# Grant access to secrets on a per-service basis using the per-service secrets configuration. Two different syntax variants are supported.
    secrets:
      - my_secret
      - my_other_secret
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true
# Long form
    secrets:
      - source: my_secret
        target: redis_secret
        uid: '103'
        gid: '103'
        mode: 0440
secrets:
  my_secret:
    file: ./my_secret.txt
  my_other_secret:
    external: true

# Override the default labeling scheme for each container.
    security_opt:
      - label:user:USER
      - label:role:ROLE

# Kernel parameters to set in the container. You can use either an array or a dictionary.
    sysctls:
      net.core.somaxconn: 1024
      net.ipv4.tcp_syncookies: 0
# OR
    sysctls:
      - net.core.somaxconn=1024
      - net.ipv4.tcp_syncookies=0

# Override the default ulimits for a container. You can either specify a single limit as an integer or soft/hard limits as a mapping.
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000

# Mount host paths or named volumes, specified as sub-options to a service.
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static

#The long form syntax allows the configuration of additional fields that can’t be expressed in the short form.

#   -   type: the mount type volume, bind or tmpfs
#   -   source: the source of the mount, a path on the host for a bind mount, or the name of a volume defined in the top-level volumes key. Not applicable for a tmpfs mount.
#   -   target: the path in the container where the volume is mounted
#   -   read_only: flag to set the volume as read-only
#   -   bind: configure additional bind options
#       - propagation: the propagation mode used for the bind
#   -   volume: configure additional volume options
#       - nocopy: flag to disable copying of data from a container when a volume is created
#   -   tmpfs: configure additional tmpfs options
#       - size: the size for the tmpfs mount in bytes
    volumes:
      - type: volume
        source: mydata
        target: /data
        volume:
          nocopy: true
      - type: bind
        source: ./static
        target: /opt/app/static
networks:
  webnet:

volumes:
  mydata:

# Restart polisy
    restart: "no"
    restart: always
    restart: on-failure
    restart: unless-stopped

# Each of these is a single value, analogous to its docker run counterpart.
    user: postgresql
    working_dir: /code

    domainname: foo.com
    hostname: foo
    ipc: host
    mac_address: 02:42:ac:11:65:43

    privileged: true


    read_only: true
    shm_size: 64M
    stdin_open: true
    tty: true
